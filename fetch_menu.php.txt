<?php
error_reporting(E_ALL);
ini_set('display_errors', 1);

header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: POST, GET, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");
header("Content-Type: application/json");

// Database Connection
$servername = "sql311.infinityfree.com";
$db_username = "if0_38295275";
$db_password = "u6ZE12JXaOa5No";
$dbname = "if0_38295275_canteendb";

$conn = new mysqli($servername, $db_username, $db_password, $dbname);
if ($conn->connect_error) {
    die(json_encode(["status" => "error", "message" => "Database connection failed"]));
}

// Get parameters
$selected_date = isset($_GET['date']) ? $_GET['date'] : date("Y-m-d");
$selected_hour = isset($_GET['hour']) ? $_GET['hour'] : null;
$chart_type = isset($_GET['type']) ? $_GET['type'] : "bar_chart"; // Default to bar chart

// Function to safely fetch and clean data
function cleanData($conn, $data) {
    return htmlspecialchars(strip_tags(mysqli_real_escape_string($conn, trim($data))));
}
// Validate parameters
if (!preg_match("/^\d{4}-\d{2}-\d{2}$/", $selected_date)) {
    die(json_encode(["error" => "Invalid date format. Use YYYY-MM-DD."]));
}

if ($selected_hour !== null && (!is_numeric($selected_hour) || $selected_hour < 0 || $selected_hour > 23)) {
    die(json_encode(["error" => "Invalid hour. Must be a number between 0 and 23."]));
}

$valid_chart_types = ["bar_chart", "line_chart", "leaderboard", "percentage", "service", "experience"];
if (!in_array($chart_type, $valid_chart_types)) {
    die(json_encode(["error" => "Invalid chart type."]));
}

// Fetch menu item names for the selected date
$query = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Menu' AND COLUMN_NAME != 'MenuDate'";
$result = $conn->query($query);

$menu_items = [];
while ($row = $result->fetch_assoc()) {
    $menu_items[] = $row['COLUMN_NAME'];
}

// Ensure menu items are not empty
if (empty($menu_items)) {
    die(json_encode(["error" => "No menu items found in the database."]));
}

// Initialize feedback tracking for each menu item
$feedback_data = [];
foreach ($menu_items as $item) {
    $feedback_data[$item] = ["3" => 0, "2" => 0, "1" => 0, "0" => 0]; // Include all rating categories
}

// Validation Types
$valid_types = ['service', 'behaviour', 'cleanliness', 'menu_variety', 'overall_satisfaction'];

$feedback = [];
foreach ($valid_types as $item) {
    $feedback[$item] = ["2" => 0, "1" => 0, "0" => 0]; // Include all rating categories
}
// Fetch feedback from database based on date and optional hour
$query = "SELECT * FROM canteenfeedbacksystem WHERE feedback_date = ?";
$params = [$selected_date];
$param_types = "s";

if ($selected_hour) {
    $query .= " AND HOUR(feedback_time) = ?";
    $params[] = (int)$selected_hour;  // Make sure $selected_hour is an integer
    $param_types .= "i";
}

$stmt = $conn->prepare($query);
if (!$stmt) {
    die(json_encode(["error" => "Failed to prepare SQL statement: " . $conn->error]));
}

$stmt->bind_param($param_types, ...$params);
if (!$stmt->execute()) {
    die(json_encode(["error" => "Failed to execute SQL statement: " . $stmt->error]));
}

$result = $stmt->get_result();

// Check if any feedback exists
if ($result->num_rows === 0) {
    echo json_encode([]);  // Return an empty array if no data is found.  The JS will handle this
    exit;
}

// Process feedback data
while ($row = $result->fetch_assoc()) {
    foreach ($menu_items as $item) {
        if (isset($row[$item])) {
            $rating = intval($row[$item]);  // Ensure $rating is an integer
            if ($rating >= 0 && $rating <= 3 && isset($feedback_data[$item][$rating])) { // Validate rating and Ignore -1 ratings
                $feedback_data[$item][$rating]++;
            }
        }
    }
}

// Fetch experince
$valid_types = ['service', 'behaviour', 'cleanliness', 'menu_variety', 'overall_satisfaction'];
$experience_data = [];

$query = "SELECT * FROM experience WHERE feedback_date = ?";
$params = [$selected_date];
$param_types = "s";

if ($selected_hour) {
    $query .= " AND HOUR(feedback_time) = ?";
    $params[] = (int)$selected_hour;  // Make sure $selected_hour is an integer
    $param_types .= "i";
}

$stmt = $conn->prepare($query);
if (!$stmt) {
    die(json_encode(["error" => "Failed to prepare SQL statement: " . $conn->error]));
}

$stmt->bind_param($param_types, ...$params);
if (!$stmt->execute()) {
    die(json_encode(["error" => "Failed to execute SQL statement: " . $stmt->error]));
}

$result = $stmt->get_result();

if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        foreach ($valid_types as $type) {
            if (isset($row[$type])) {
                $experience_data[$type] = intval($row[$type]);  // Store the integer value directly
            } else {
                $experience_data[$type] = 0; // Default value if not set in the database
            }
        }
    }
}else{
     foreach ($valid_types as $type) {
            $experience_data[$type] = 0; // Default value if not set in the database
     }
}


// Return data based on chart type
switch ($chart_type) {
    case "bar_chart": // Stacked Bar Chart
        echo json_encode($feedback_data);
        break;

    case "line_chart": // Trend Over Time
        echo json_encode(["message" => "Line chart logic will be implemented next."]);
        break;

    case "leaderboard": // Top & Bottom Rated Items
        $leaderboard = [];
        foreach ($feedback_data as $item => $ratings) {
            $total_score = ($ratings["3"] * 3) + ($ratings["2"] * 2) + ($ratings["1"] * 1);
            $total_votes = $ratings["3"] + $ratings["2"] + $ratings["1"];
            $average_rating = $total_votes > 0 ? round($total_score / $total_votes, 2) : 0;
            $leaderboard[$item] = $average_rating;
        }
        arsort($leaderboard);
        echo json_encode($leaderboard);
        break;

    case "percentage":
        $percentage_data = [];
        foreach ($feedback_data as $item => $ratings) {
            $total_votes = array_sum($ratings);
            if ($total_votes > 0) {
                foreach ($ratings as $rating => $count) {
                    $percentage_data[$item][$rating] = round(($count / $total_votes) * 100, 2);
                }
            } else {
                // Default to 0% if no votes exist
                $percentage_data[$item] = ["3" => 0.00, "2" => 0.00, "1" => 0.00, "0" => 0.00];
            }
        }
        echo json_encode($percentage_data);
        break;
    case "service":
       
        echo json_encode($feedback);
        break;

        case "experience":
            echo json_encode($experience_data);
            break;


    default:
        echo json_encode(["error" => "Invalid chart type"]);
}
$stmt->close();
$conn->close();
?>